// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationApiClient is the client API for ConversationApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationApiClient interface {
	CreateConversationV1(ctx context.Context, in *CreateConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DescribeConversationV1(ctx context.Context, in *DescribeConversationV1Request, opts ...grpc.CallOption) (*DescribeConversationV1Response, error)
	ListConversationsV1(ctx context.Context, in *ListConversationsV1Request, opts ...grpc.CallOption) (*ListConversationsV1Response, error)
	RemoveConversationV1(ctx context.Context, in *RemoveConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateConversationV1(ctx context.Context, in *UpdateConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MultiCreateConversationsV1(ctx context.Context, in *MultiCreateConversationsV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type conversationApiClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationApiClient(cc grpc.ClientConnInterface) ConversationApiClient {
	return &conversationApiClient{cc}
}

func (c *conversationApiClient) CreateConversationV1(ctx context.Context, in *CreateConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/CreateConversationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationApiClient) DescribeConversationV1(ctx context.Context, in *DescribeConversationV1Request, opts ...grpc.CallOption) (*DescribeConversationV1Response, error) {
	out := new(DescribeConversationV1Response)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/DescribeConversationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationApiClient) ListConversationsV1(ctx context.Context, in *ListConversationsV1Request, opts ...grpc.CallOption) (*ListConversationsV1Response, error) {
	out := new(ListConversationsV1Response)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/ListConversationsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationApiClient) RemoveConversationV1(ctx context.Context, in *RemoveConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/RemoveConversationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationApiClient) UpdateConversationV1(ctx context.Context, in *UpdateConversationV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/UpdateConversationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationApiClient) MultiCreateConversationsV1(ctx context.Context, in *MultiCreateConversationsV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.conversation.api.ConversationApi/MultiCreateConversationsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationApiServer is the server API for ConversationApi service.
// All implementations must embed UnimplementedConversationApiServer
// for forward compatibility
type ConversationApiServer interface {
	CreateConversationV1(context.Context, *CreateConversationV1Request) (*emptypb.Empty, error)
	DescribeConversationV1(context.Context, *DescribeConversationV1Request) (*DescribeConversationV1Response, error)
	ListConversationsV1(context.Context, *ListConversationsV1Request) (*ListConversationsV1Response, error)
	RemoveConversationV1(context.Context, *RemoveConversationV1Request) (*emptypb.Empty, error)
	UpdateConversationV1(context.Context, *UpdateConversationV1Request) (*emptypb.Empty, error)
	MultiCreateConversationsV1(context.Context, *MultiCreateConversationsV1Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedConversationApiServer()
}

// UnimplementedConversationApiServer must be embedded to have forward compatible implementations.
type UnimplementedConversationApiServer struct {
}

func (UnimplementedConversationApiServer) CreateConversationV1(context.Context, *CreateConversationV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversationV1 not implemented")
}
func (UnimplementedConversationApiServer) DescribeConversationV1(context.Context, *DescribeConversationV1Request) (*DescribeConversationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConversationV1 not implemented")
}
func (UnimplementedConversationApiServer) ListConversationsV1(context.Context, *ListConversationsV1Request) (*ListConversationsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationsV1 not implemented")
}
func (UnimplementedConversationApiServer) RemoveConversationV1(context.Context, *RemoveConversationV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConversationV1 not implemented")
}
func (UnimplementedConversationApiServer) UpdateConversationV1(context.Context, *UpdateConversationV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationV1 not implemented")
}
func (UnimplementedConversationApiServer) MultiCreateConversationsV1(context.Context, *MultiCreateConversationsV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateConversationsV1 not implemented")
}
func (UnimplementedConversationApiServer) mustEmbedUnimplementedConversationApiServer() {}

// UnsafeConversationApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationApiServer will
// result in compilation errors.
type UnsafeConversationApiServer interface {
	mustEmbedUnimplementedConversationApiServer()
}

func RegisterConversationApiServer(s grpc.ServiceRegistrar, srv ConversationApiServer) {
	s.RegisterService(&ConversationApi_ServiceDesc, srv)
}

func _ConversationApi_CreateConversationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).CreateConversationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/CreateConversationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).CreateConversationV1(ctx, req.(*CreateConversationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationApi_DescribeConversationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeConversationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).DescribeConversationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/DescribeConversationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).DescribeConversationV1(ctx, req.(*DescribeConversationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationApi_ListConversationsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).ListConversationsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/ListConversationsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).ListConversationsV1(ctx, req.(*ListConversationsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationApi_RemoveConversationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConversationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).RemoveConversationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/RemoveConversationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).RemoveConversationV1(ctx, req.(*RemoveConversationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationApi_UpdateConversationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).UpdateConversationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/UpdateConversationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).UpdateConversationV1(ctx, req.(*UpdateConversationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationApi_MultiCreateConversationsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateConversationsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationApiServer).MultiCreateConversationsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.conversation.api.ConversationApi/MultiCreateConversationsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationApiServer).MultiCreateConversationsV1(ctx, req.(*MultiCreateConversationsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationApi_ServiceDesc is the grpc.ServiceDesc for ConversationApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.conversation.api.ConversationApi",
	HandlerType: (*ConversationApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversationV1",
			Handler:    _ConversationApi_CreateConversationV1_Handler,
		},
		{
			MethodName: "DescribeConversationV1",
			Handler:    _ConversationApi_DescribeConversationV1_Handler,
		},
		{
			MethodName: "ListConversationsV1",
			Handler:    _ConversationApi_ListConversationsV1_Handler,
		},
		{
			MethodName: "RemoveConversationV1",
			Handler:    _ConversationApi_RemoveConversationV1_Handler,
		},
		{
			MethodName: "UpdateConversationV1",
			Handler:    _ConversationApi_UpdateConversationV1_Handler,
		},
		{
			MethodName: "MultiCreateConversationsV1",
			Handler:    _ConversationApi_MultiCreateConversationsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
