// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateConversationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateConversationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Text

	return nil
}

// CreateConversationV1RequestValidationError is the validation error returned
// by CreateConversationV1Request.Validate if the designated constraints
// aren't met.
type CreateConversationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConversationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConversationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConversationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConversationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConversationV1RequestValidationError) ErrorName() string {
	return "CreateConversationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConversationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConversationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConversationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConversationV1RequestValidationError{}

// Validate checks the field values on DescribeConversationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeConversationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DescribeConversationV1RequestValidationError is the validation error
// returned by DescribeConversationV1Request.Validate if the designated
// constraints aren't met.
type DescribeConversationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeConversationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeConversationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeConversationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeConversationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeConversationV1RequestValidationError) ErrorName() string {
	return "DescribeConversationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeConversationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeConversationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeConversationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeConversationV1RequestValidationError{}

// Validate checks the field values on DescribeConversationV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeConversationV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Text

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeConversationV1ResponseValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeConversationV1ResponseValidationError is the validation error
// returned by DescribeConversationV1Response.Validate if the designated
// constraints aren't met.
type DescribeConversationV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeConversationV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeConversationV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeConversationV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeConversationV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeConversationV1ResponseValidationError) ErrorName() string {
	return "DescribeConversationV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeConversationV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeConversationV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeConversationV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeConversationV1ResponseValidationError{}

// Validate checks the field values on ListConversationsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConversationsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListConversationsV1RequestValidationError is the validation error returned
// by ListConversationsV1Request.Validate if the designated constraints aren't met.
type ListConversationsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsV1RequestValidationError) ErrorName() string {
	return "ListConversationsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsV1RequestValidationError{}

// Validate checks the field values on ListConversationsV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConversationsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConversationsV1ResponseValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListConversationsV1ResponseValidationError is the validation error returned
// by ListConversationsV1Response.Validate if the designated constraints
// aren't met.
type ListConversationsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsV1ResponseValidationError) ErrorName() string {
	return "ListConversationsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsV1ResponseValidationError{}

// Validate checks the field values on RemoveConversationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveConversationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemoveConversationV1RequestValidationError is the validation error returned
// by RemoveConversationV1Request.Validate if the designated constraints
// aren't met.
type RemoveConversationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveConversationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveConversationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveConversationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveConversationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveConversationV1RequestValidationError) ErrorName() string {
	return "RemoveConversationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveConversationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveConversationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveConversationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveConversationV1RequestValidationError{}

// Validate checks the field values on UpdateConversationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateConversationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Text

	return nil
}

// UpdateConversationV1RequestValidationError is the validation error returned
// by UpdateConversationV1Request.Validate if the designated constraints
// aren't met.
type UpdateConversationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationV1RequestValidationError) ErrorName() string {
	return "UpdateConversationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationV1RequestValidationError{}

// Validate checks the field values on MultiCreateConversationsV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MultiCreateConversationsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCreateConversation() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateConversationsV1RequestValidationError{
					field:  fmt.Sprintf("CreateConversation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateConversationsV1RequestValidationError is the validation error
// returned by MultiCreateConversationsV1Request.Validate if the designated
// constraints aren't met.
type MultiCreateConversationsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateConversationsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateConversationsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateConversationsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateConversationsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateConversationsV1RequestValidationError) ErrorName() string {
	return "MultiCreateConversationsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateConversationsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateConversationsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateConversationsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateConversationsV1RequestValidationError{}
